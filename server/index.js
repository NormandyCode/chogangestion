import express from 'express';
import cors from 'cors';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import ordersRouter from './routes/orders.js';
import emailRouter from './routes/email.js';
import smsRouter from './routes/sms.js';
import { supabase } from './db/config.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const port = process.env.PORT || 3001;

app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'DELETE', 'UPDATE', 'PUT', 'PATCH'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

app.use(express.json());
app.use(express.static(join(__dirname, '../dist')));

app.use('/api/orders', ordersRouter);
app.use('/api/email', emailRouter);
app.use('/api/sms', smsRouter);

async function initDb() {
  try {
    const { data: existingTables, error: checkError } = await supabase
      .from('clients')
      .select('id')
      .limit(1);

    if (checkError && checkError.code === '42P01') {
      const { error } = await supabase.rest.sql`
        create table if not exists clients (
          id bigint generated by default as identity primary key,
          nom_complet text not null,
          adresse text not null,
          email text,
          telephone text
        );

        create table if not exists produits (
          id bigint generated by default as identity primary key,
          nom text not null,
          reference text not null unique,
          parfum_brand text
        );

        create table if not exists commandes (
          id bigint generated by default as identity primary key,
          client_id bigint not null references clients(id),
          numero_facture text not null unique,
          montant_total decimal(10,2) not null,
          date_creation date not null,
          is_paid boolean default false,
          payment_method text check(payment_method in ('card', 'check', 'cash', 'transfer'))
        );

        create table if not exists commande_produits (
          commande_id bigint references commandes(id) on delete cascade,
          produit_id bigint references produits(id),
          primary key (commande_id, produit_id)
        );
      `;

      if (error) throw error;
    }

    console.log('Base de données initialisée avec succès');
  } catch (err) {
    console.error('Erreur lors de l\'initialisation de la base de données:', err);
    process.exit(1);
  }
}

initDb().then(() => {
  app.get('*', (req, res) => {
    res.sendFile(join(__dirname, '../dist/index.html'));
  });

  app.listen(port, () => {
    console.log(`Serveur démarré sur le port ${port}`);
    console.log(`Application accessible sur http://localhost:${port}`);
  });
}).catch(err => {
  console.error('Erreur fatale:', err);
  process.exit(1);
});